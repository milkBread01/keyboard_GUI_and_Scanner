<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36" version="27.0.5">
  <diagram name="Page-1" id="1SPhpuADm64l0Hxg2bN5">
    <mxGraphModel dx="6753" dy="4366" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="7xy5X7pBSjGH1rJuHNb_-1" value="Main()" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="425" y="-470" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="7xy5X7pBSjGH1rJuHNb_-3" value="Class Encoder" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="200" y="120" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="KJ3M8dmH54Ed4lHhk8dp-18" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" parent="1" source="7xy5X7pBSjGH1rJuHNb_-4" target="KJ3M8dmH54Ed4lHhk8dp-14" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="7xy5X7pBSjGH1rJuHNb_-4" value="Class ProfileManager" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-165" y="120" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="b_a46SGkJAuNYU5xgQpd-3" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="7xy5X7pBSjGH1rJuHNb_-5" target="BoiXlNUUXAva4qsgIHvO-4">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="7xy5X7pBSjGH1rJuHNb_-5" value="Class LCDController" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="690" y="110" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="b_a46SGkJAuNYU5xgQpd-4" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="7xy5X7pBSjGH1rJuHNb_-6" target="BoiXlNUUXAva4qsgIHvO-8">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="7xy5X7pBSjGH1rJuHNb_-6" value="Class SystemManager" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1200" y="110" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="7xy5X7pBSjGH1rJuHNb_-7" value="Class HostCommunicator" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="2180" y="110" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="b_a46SGkJAuNYU5xgQpd-6" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="7xy5X7pBSjGH1rJuHNb_-8" target="BoiXlNUUXAva4qsgIHvO-10">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="7xy5X7pBSjGH1rJuHNb_-8" value="Class KeyScanner" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1700" y="110" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="KJ3M8dmH54Ed4lHhk8dp-19" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" source="7xy5X7pBSjGH1rJuHNb_-9" target="7xy5X7pBSjGH1rJuHNb_-10" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="7xy5X7pBSjGH1rJuHNb_-9" value="Class CreatedProfiles" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-570" y="120" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="7xy5X7pBSjGH1rJuHNb_-10" value="header" style="shape=parallelogram;perimeter=parallelogramPerimeter;whiteSpace=wrap;html=1;fixedSize=1;" parent="1" vertex="1">
          <mxGeometry x="-680" y="250" width="340" height="40" as="geometry" />
        </mxCell>
        <mxCell id="7xy5X7pBSjGH1rJuHNb_-15" value="-------OVERALL-------&amp;nbsp;&lt;div&gt;&lt;div&gt;Reads and parses the full JSON file into memory&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Creates and holds all Profile objects&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Provides read-only or query access to:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;Full key maps&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;Profile metadata (media, primary flag, etc.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;Profile names list&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-------METHODS-------&amp;nbsp;&lt;/div&gt;&lt;div&gt;- Constructor:&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;" style="shape=process;whiteSpace=wrap;html=1;backgroundOutline=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="-680" y="-280" width="340" height="340" as="geometry" />
        </mxCell>
        <mxCell id="KJ3M8dmH54Ed4lHhk8dp-2" value="-------OVERALL-------&amp;nbsp;&lt;div&gt;&lt;div&gt;Holds only the active profile name&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Requests data (keys, media, etc.) from CreateProfiles&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Performs logic such as:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;Set active profile&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;Check for flags (new profile needed, etc.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;Pass keymaps to KeyScanner&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;Notify SystemManager of profile changes&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-------METHODS-------&amp;nbsp;&lt;/div&gt;&lt;div&gt;- Constructor:&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;" style="shape=process;whiteSpace=wrap;html=1;backgroundOutline=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="-320" y="-280" width="340" height="340" as="geometry" />
        </mxCell>
        <mxCell id="KJ3M8dmH54Ed4lHhk8dp-3" value="-------OVERALL-------&amp;nbsp;&lt;div&gt;Tracks the encoder’s state: rotation, short clicks, long clicks, and combination actions. Interprets physical input into logical states (State 0–3) and informs &lt;code data-end=&quot;1506&quot; data-start=&quot;1491&quot;&gt;SystemManager&lt;/code&gt; how to respond (e.g., show battery, switch profile).&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-------METHODS-------&amp;nbsp;&lt;/div&gt;&lt;div&gt;- Constructor:&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;" style="shape=process;whiteSpace=wrap;html=1;backgroundOutline=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="30" y="-280" width="340" height="340" as="geometry" />
        </mxCell>
        <mxCell id="KJ3M8dmH54Ed4lHhk8dp-4" value="-------OVERALL-------&amp;nbsp;&lt;div&gt;Manages what is shown on the LCD screen, including media, battery status, profile selection UI, and pairing prompts. Handles display overrides and UI responses based on encoder input or system flags.&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-------METHODS-------&amp;nbsp;&lt;/div&gt;&lt;div&gt;- Constructor:&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;" style="shape=process;whiteSpace=wrap;html=1;backgroundOutline=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="380" y="-280" width="340" height="340" as="geometry" />
        </mxCell>
        <mxCell id="KJ3M8dmH54Ed4lHhk8dp-5" value="-------OVERALL-------&amp;nbsp;&lt;div&gt;Top-level controller that initializes all subsystems, runs the main loop, and coordinates encoder input, profile changes, LCD output, and key scanning. Acts as the brain of the microcontroller logic.&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-------METHODS-------&amp;nbsp;&lt;/div&gt;&lt;div&gt;- Constructor:&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;" style="shape=process;whiteSpace=wrap;html=1;backgroundOutline=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="740" y="-280" width="340" height="340" as="geometry" />
        </mxCell>
        <mxCell id="KJ3M8dmH54Ed4lHhk8dp-6" value="-------OVERALL-------&amp;nbsp;&lt;div&gt;Scans the matrix of rows and columns for key presses. Uses the current profile’s key mappings to determine and dispatch the correct action (e.g., launch app, send string). Can store and iterate over a nested map of active key mappings.&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-------METHODS-------&amp;nbsp;&lt;/div&gt;&lt;div&gt;- Constructor:&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;" style="shape=process;whiteSpace=wrap;html=1;backgroundOutline=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="1100" y="-280" width="340" height="340" as="geometry" />
        </mxCell>
        <mxCell id="KJ3M8dmH54Ed4lHhk8dp-7" value="-------OVERALL-------&amp;nbsp;&lt;div&gt;Handles all file and flag communication between the microcontroller and host PC (or GUI). Responsible for reading the JSON profile file, sending status flags (like battery %), and managing media file lookup. Acts as the bridge between MC and host.&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-------METHODS-------&amp;nbsp;&lt;/div&gt;&lt;div&gt;- Constructor:&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;" style="shape=process;whiteSpace=wrap;html=1;backgroundOutline=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="1480" y="-280" width="340" height="340" as="geometry" />
        </mxCell>
        <mxCell id="KJ3M8dmH54Ed4lHhk8dp-13" value="&lt;div&gt;class CreateProfiles {&lt;/div&gt;&lt;div&gt;namespace KeypadController{&lt;/div&gt;&lt;blockquote style=&quot;margin: 0 0 0 40px; border: none; padding: 0px;&quot;&gt;&lt;div&gt;public:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; void loadFromFile(const std::string&amp;amp; path);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const std::vector&amp;lt;std::string&amp;gt;&amp;amp; getAllProfileNames() const;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const std::map&amp;lt;std::pair&amp;lt;int, int&amp;gt;, KeyAction&amp;gt;&amp;amp; getKeyMap(const std::string&amp;amp; profileName) const;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const std::map&amp;lt;std::string, std::string&amp;gt;&amp;amp; getMedia(const std::string&amp;amp; profileName) const;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; bool isPrimary(const std::string&amp;amp; profileName) const;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;private:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; struct ProfileData {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; std::map&amp;lt;std::pair&amp;lt;int, int&amp;gt;, KeyAction&amp;gt; keys;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; std::map&amp;lt;std::string, std::string&amp;gt; media;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; bool primary;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; };&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; std::map&amp;lt;std::string, ProfileData&amp;gt; profiles;&lt;/div&gt;&lt;div&gt;};&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="-680" y="290" width="320" height="410" as="geometry" />
        </mxCell>
        <mxCell id="KJ3M8dmH54Ed4lHhk8dp-14" value="header" style="shape=parallelogram;perimeter=parallelogramPerimeter;whiteSpace=wrap;html=1;fixedSize=1;" parent="1" vertex="1">
          <mxGeometry x="-300" y="250" width="390" height="40" as="geometry" />
        </mxCell>
        <mxCell id="KJ3M8dmH54Ed4lHhk8dp-15" value="&lt;div&gt;class ProfileManager&amp;nbsp;{&lt;/div&gt;&lt;div&gt;namespace KeypadController{&lt;/div&gt;&lt;blockquote style=&quot;margin: 0 0 0 40px; border: none; padding: 0px;&quot;&gt;&lt;div&gt;class ProfileManager {&lt;/div&gt;&lt;div&gt;public:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; ProfileManager(CreateProfiles&amp;amp; profileDataRef);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; void setActiveProfile(const std::string&amp;amp; name);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const std::string&amp;amp; getActiveProfileName() const;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const std::map&amp;lt;std::pair&amp;lt;int, int&amp;gt;, KeyAction&amp;gt;&amp;amp; getActiveKeyMap() const;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const std::map&amp;lt;std::string, std::string&amp;gt;&amp;amp; getActiveMedia() const;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;private:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; std::string activeName;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; CreateProfiles&amp;amp; profiles;&lt;/div&gt;&lt;div&gt;};&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;}&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="-300" y="290" width="370" height="410" as="geometry" />
        </mxCell>
        <mxCell id="BoiXlNUUXAva4qsgIHvO-2" value="header" style="shape=parallelogram;perimeter=parallelogramPerimeter;whiteSpace=wrap;html=1;fixedSize=1;" parent="1" vertex="1">
          <mxGeometry x="80" y="250" width="340" height="40" as="geometry" />
        </mxCell>
        <mxCell id="BoiXlNUUXAva4qsgIHvO-3" value="&lt;div&gt;#pragma once&lt;/div&gt;&lt;div&gt;#include &amp;lt;iostream&amp;gt;&lt;/div&gt;&lt;div&gt;#include &amp;lt;chrono&amp;gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;namespace KeypadController {&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; // Detects encoder interactions: rotation, short click, long click, and combo click.&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; class Encoder {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; public:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Encoder();&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Polls encoder input state and updates internal tracking&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; void updateState();&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Returns true if encoder was rotated (used for scrolling or volume)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; bool isRotated() const;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Returns a number representing the encoder state:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // 0 = rotate only, 1 = short click, 2 = long click, 3 = short+long combo&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int getClickPattern();&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Clears click and timing state after handling&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; void resetClickPattern();&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; private:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Helpers for detecting timing&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; bool detectShortClick();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; bool detectLongClick();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; bool detectComboClick();&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Internal tracking&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int clickCount;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; bool rotated;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; bool isPressed;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; std::chrono::steady_clock::time_point pressStartTime;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; std::chrono::steady_clock::time_point lastClickTime;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; };&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="80" y="290" width="460" height="620" as="geometry" />
        </mxCell>
        <mxCell id="BoiXlNUUXAva4qsgIHvO-4" value="header" style="shape=parallelogram;perimeter=parallelogramPerimeter;whiteSpace=wrap;html=1;fixedSize=1;" parent="1" vertex="1">
          <mxGeometry x="580" y="250" width="340" height="40" as="geometry" />
        </mxCell>
        <mxCell id="BoiXlNUUXAva4qsgIHvO-6" value="&lt;div&gt;&lt;div&gt;#pragma once&lt;/div&gt;&lt;div&gt;#include &amp;lt;iostream&amp;gt;&lt;/div&gt;&lt;div&gt;#include &amp;lt;vector&amp;gt;&lt;/div&gt;&lt;div&gt;#include &amp;lt;string&amp;gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;namespace KeypadController {&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; // Controls the LCD screen: shows media, battery %, profiles, and pairing UI.&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; class LCDController {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; public:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; LCDController();&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Displays the current battery level on the LCD&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; void showBatteryPercentage();&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Displays a scrollable list of available profiles for selection&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; void showProfileSelector(const std::vector&amp;lt;std::string&amp;gt;&amp;amp; profiles);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Highlights the profile at the given index (rotary input from encoder)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; void highlightProfile(int index);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Confirms the profile selection and returns the selected profile name&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; std::string confirmProfileSelection();&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Displays a prompt for pairing decision and allows yes/no selection&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; void showPairingPrompt();&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Returns true if user selects “yes” to pairing, false if “no”&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; bool getPairingDecision();&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Loads and displays the media tied to the given profile (e.g. image or video)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; void showMediaForProfile(const std::string&amp;amp; profile);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Temporarily override the display with a message&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; void overrideWithMessage(const std::string&amp;amp; msg);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; private:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int selectedProfileIndex = 0;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; std::vector&amp;lt;std::string&amp;gt; currentProfileList;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; };&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="580" y="290" width="460" height="620" as="geometry" />
        </mxCell>
        <mxCell id="BoiXlNUUXAva4qsgIHvO-7" value="&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="1090" y="290" width="460" height="620" as="geometry" />
        </mxCell>
        <mxCell id="BoiXlNUUXAva4qsgIHvO-8" value="header" style="shape=parallelogram;perimeter=parallelogramPerimeter;whiteSpace=wrap;html=1;fixedSize=1;" parent="1" vertex="1">
          <mxGeometry x="1090" y="250" width="340" height="40" as="geometry" />
        </mxCell>
        <mxCell id="BoiXlNUUXAva4qsgIHvO-9" value="&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;#pragma once&lt;/div&gt;&lt;div&gt;#include &amp;lt;iostream&amp;gt;&lt;/div&gt;&lt;div&gt;#include &amp;lt;map&amp;gt;&lt;/div&gt;&lt;div&gt;#include &amp;lt;string&amp;gt;&lt;/div&gt;&lt;div&gt;#include &amp;lt;utility&amp;gt;&lt;/div&gt;&lt;div&gt;#include &quot;KeyAction.h&quot;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;namespace KeypadController {&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; // Scans the key matrix and dispatches actions based on the active key profile.&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; class KeyScanner {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; public:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; KeyScanner();&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Inject keymap for the currently active profile&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; void setActiveKeyMap(const std::map&amp;lt;std::pair&amp;lt;int, int&amp;gt;, KeyAction&amp;gt;&amp;amp; keyMap);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Scans the matrix for a key press and determines row/col&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; void scanKeys();&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Performs an action associated with the detected key&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; void performAction(const KeyAction&amp;amp; action);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Actions (called by performAction)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; void launchApp(const std::string&amp;amp; path);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; void openWebsite(const std::string&amp;amp; url);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; void sendChars(const std::string&amp;amp; chars);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; void executeSequence(const std::vector&amp;lt;std::string&amp;gt;&amp;amp; steps);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; private:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; std::map&amp;lt;std::pair&amp;lt;int, int&amp;gt;, KeyAction&amp;gt; currentKeyMap;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; };&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="1590" y="290" width="460" height="620" as="geometry" />
        </mxCell>
        <mxCell id="BoiXlNUUXAva4qsgIHvO-10" value="header" style="shape=parallelogram;perimeter=parallelogramPerimeter;whiteSpace=wrap;html=1;fixedSize=1;" parent="1" vertex="1">
          <mxGeometry x="1590" y="250" width="340" height="40" as="geometry" />
        </mxCell>
        <mxCell id="b_a46SGkJAuNYU5xgQpd-2" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.529;entryY=0.039;entryDx=0;entryDy=0;entryPerimeter=0;" edge="1" parent="1" source="7xy5X7pBSjGH1rJuHNb_-3" target="BoiXlNUUXAva4qsgIHvO-2">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="b_a46SGkJAuNYU5xgQpd-7" value="&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;#pragma once&lt;/div&gt;&lt;div&gt;#include &amp;lt;iostream&amp;gt;&lt;/div&gt;&lt;div&gt;#include &amp;lt;string&amp;gt;&lt;/div&gt;&lt;div&gt;#include &amp;lt;map&amp;gt;&lt;/div&gt;&lt;div&gt;#include &amp;lt;vector&amp;gt;&lt;/div&gt;&lt;div&gt;#include &amp;lt;utility&amp;gt;&lt;/div&gt;&lt;div&gt;#include &quot;KeyAction.h&quot;&lt;/div&gt;&lt;div&gt;using std::string;&lt;/div&gt;&lt;div&gt;namespace KeypadController {&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; // Handles all file and flag communication with the host device.&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; class HostCommunicator {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; public:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HostCommunicator();&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Parses the profile file into a usable nested map&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; //std::map&amp;lt;std::string, std::map&amp;lt;std::pair&amp;lt;int, int&amp;gt;, KeyAction&amp;gt;&amp;gt; fetchProfilesFromFile();&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Utility to convert &quot;row-col&quot; string to int pair&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; std::pair&amp;lt;int, int&amp;gt; parseKeyPos(const std::string&amp;amp; keyStr);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Sends flags to host (e.g. profile updated)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; void sendFlag(const std::string&amp;amp; flagName, bool value);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Reads flag from host (e.g. &quot;isUpdated&quot;)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; bool readFlag(const std::string&amp;amp; flagName);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Sends battery status for GUI feedback&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; void sendBatteryStatus(int percentage);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Sends result of pairing request&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; void sendPairingStatus(bool accepted);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Gets the filename or binary of media for a profile&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; std::string getMediaForProfile(const std::string&amp;amp; profileName);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; private:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; std::string profileFilePath = &quot;saved_profiles.txt&quot;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; std::vector&amp;lt;string&amp;gt; profileNames;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; };&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="2090" y="290" width="460" height="620" as="geometry" />
        </mxCell>
        <mxCell id="b_a46SGkJAuNYU5xgQpd-8" value="header" style="shape=parallelogram;perimeter=parallelogramPerimeter;whiteSpace=wrap;html=1;fixedSize=1;" vertex="1" parent="1">
          <mxGeometry x="2090" y="250" width="340" height="40" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
